@using blazor_server_buildings.Models

@page "/order/display/{Id:int}"
@inject IFoodData footData
@inject IOrderData orderData
@inject NavigationManager navigationManager


<h3>Display</h3>

@if (recordNotfound)
{
    <h4>Record Not Found</h4>
}
else if (order is null)
{
    <h4>Record Loading ...</h4>
}
else
{
    <table class="table">
        <thead></thead>
        <tbody>
            <tr>
                <td><strong>OrderName</strong></td>
                <td>@order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@($"{order.Total:C}")</td>
            </tr>
            <tr>
                <td><strong>Item Order</strong></td>
                <td>@itemPurchased</td>
            </tr>
        <tr>
            <td><strong>Quantity Ordered</strong></td>
            <td>@order.Quantity</td>
        </tr>
        <tr>
            <td colspan="2">
                @if (confirmDelete)
                {
                    <button class="btn btn-outline-danger" @onclick="HandlerDeleteRecord">
                        Confirm Delete
                    </button>
                    <button class="btn btn-secondary" @onclick="(() => confirmDelete = false)">
                        Cancele Delete
                    </button>
                }
                else
                {
                    <button class="btn btn-danger" @onclick="(() => confirmDelete = true)">
                        Delete Order
                    </button>
                }
            </td>
        </tr>
        </tbody>
    </table>
    <EditForm Model="@orderUpdateModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary Model="@orderUpdateModel"></ValidationSummary>
        
        <div class="form-group">
            <label class="control-label">Name for the Order</label>
            <InputText @bind-Value="orderUpdateModel.OrderName" class="form-control"></InputText>
            <ValidationMessage For="@(() => orderUpdateModel.OrderName)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <input type="submit" value="Update Order Name" class="btn btn-primary"/>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private OrderModel order;
    private string itemPurchased;
    private bool confirmDelete = false;
    private bool recordNotfound = false;
    private OrderUpdateModel orderUpdateModel = new OrderUpdateModel();


    protected override async Task OnInitializedAsync()
    {
        order = await orderData.GetOrderById(Id);

        if (order != null)
        {
            var food = await footData.GetFood();
            itemPurchased = food.FirstOrDefault(x => x.Id == order.FoodId)?.Title;
            
            orderUpdateModel.Id = order.Id;
            orderUpdateModel.OrderName = order.OrderName;
        }
        else
        {
            recordNotfound = true;
        }
    }

    public async Task HandleValidSubmit()
    {
        await orderData.UpdateOrderName(orderUpdateModel.Id, orderUpdateModel.OrderName);
        order.OrderName = orderUpdateModel.OrderName;
    }


    private async Task HandlerDeleteRecord()
    {
        await orderData.DeleteOrder(Id);
        navigationManager.NavigateTo("foot/list");
    }

}
